# HG changeset patch
# User Mike Hansen <mhansen@gmail.com>
# Date 1214771130 21600
# Node ID 45523152acb3c02a87ea16acec2b4e56c36022a8
# Parent  0b3ffa51fd3883c183c7c7c8b605a0f3f75c125c
imported patch m2.patch

diff -r 0b3ffa51fd38 -r 45523152acb3 sage/interfaces/expect.py
--- a/sage/interfaces/expect.py	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/interfaces/expect.py	Sun Jun 29 14:25:30 2008 -0600
@@ -926,8 +926,8 @@ If this all works, you can then make cal
     def execute(self, *args, **kwds):
         return self.eval(*args, **kwds)
 
-    #def __call__(self, x, globals=None):
-    def __call__(self, x):
+    def __call__(self, x, name=None):
+
         r"""
         Create a new object in self from x.
 
@@ -937,15 +937,12 @@ If this all works, you can then make cal
                       X.foo(y,z,...)
         calls foo(X, y, z, ...) and returns the corresponding object.
         """
-        #if not globals is None:
-        #    for k, x in globals.iteritems():
-        #        self.set(k,x)
         cls = self._object_class()
 
         if isinstance(x, cls) and x.parent() is self:
             return x
         if isinstance(x, basestring):
-            return cls(self, x)
+            return cls(self, x, name=name)
         try:
             return self._coerce_from_special_method(x)
         except TypeError:
@@ -956,7 +953,7 @@ If this all works, you can then make cal
             return self._coerce_impl(x, use_special=False)
         except TypeError, msg:
             try:
-                return cls(self, str(x))
+                return cls(self, str(x), name=name)
             except TypeError, msg2:
                 raise TypeError, msg
 
@@ -1086,14 +1083,10 @@ If this all works, you can then make cal
         self.__seq += 1
         return "sage%s"%self.__seq
 
-    def _create(self, value):
-        name = self._next_var_name()
-        #self._last_name = name
+    def _create(self, value, name=None):
+        name = self._next_var_name() if name is None else name
         self.set(name, value)
         return name
-
-    #def _last_created_varname(self):
-    #    return self._last_name
 
     def _object_class(self):
         return ExpectElement
@@ -1196,7 +1189,7 @@ class ExpectElement(RingElement):
     """
     Expect element.
     """
-    def __init__(self, parent, value, is_name=False):
+    def __init__(self, parent, value, is_name=False, name=None):
         RingElement.__init__(self, parent)
         self._create = value
         if parent is None: return     # means "invalid element"
@@ -1211,7 +1204,7 @@ class ExpectElement(RingElement):
             self._name = value
         else:
             try:
-                self._name = parent._create(value)
+                self._name = parent._create(value, name=name)
             except (TypeError, KeyboardInterrupt, RuntimeError, ValueError), x:
                 self._session_number = -1
                 raise TypeError, x
diff -r 0b3ffa51fd38 -r 45523152acb3 sage/interfaces/macaulay2.py
--- a/sage/interfaces/macaulay2.py	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/interfaces/macaulay2.py	Sun Jun 29 14:25:30 2008 -0600
@@ -97,7 +97,7 @@ import os
 
 from expect import Expect, ExpectElement, AsciiArtString
 
-from sage.misc.misc import verbose
+from sage.misc.misc import DOT_SAGE, verbose
 from sage.misc.multireplace import multiple_replace
 
 from re import search
@@ -114,12 +114,8 @@ def remove_output_labels(s):
     s = '\n'.join([x[n:] for x in v])
     return s
 
-## def clean_output(s):
-##     i = s.find('= ')
-##     if i == -1:
-##         return s
-##     j = s[:i].rfind('\n')
-##     return (s[:j] + ' '*(i+1) + s[i+2:-1]).strip()
+
+COMMANDS_CACHE = '%s/macaulay2_commandlist_cache.sobj'%DOT_SAGE
 
 class Macaulay2(Expect):
     """
@@ -162,7 +158,6 @@ class Macaulay2(Expect):
         if strip:
             ans = remove_output_labels(ans)
         return AsciiArtString(ans)
-            
 
     def get(self, var):
         """
@@ -225,13 +220,15 @@ class Macaulay2(Expect):
         EXAMPLES:
             sage: R2 = macaulay2.ring('QQ', '[x, y]'); R2            # optional
             QQ [x, y, MonomialOrder => Lex, MonomialSize => 16]
-            sage: I = macaulay2.ideal( ('y^2 - x^3', 'x - y') ); print I   # optional
+            sage: I = macaulay2.ideal( ('y^2 - x^3', 'x - y') ); I   # optional
                       3    2
             ideal (- x  + y , x - y)
-            sage: J = I^3; print J.gb()                                    # optional
-            GroebnerBasis[status: done; S-pairs encountered up to degree 9]            
-            sage: print J.gb().generators()                                # optional
-            | y9-3y8+3y7-y6 xy6-2xy5+xy4-y7+2y6-y5 x2y3-x2y2-2xy4+2xy3+y5-y4 x3-3x2y+3xy2-y3 |
+            sage: J = I^3; J.gb().gens().transpose()                 # optional
+            {-9} | y9-3y8+3y7-y6             |
+            {-7} | xy6-2xy5+xy4-y7+2y6-y5    |
+            {-5} | x2y3-x2y2-2xy4+2xy3+y5-y4 |
+            {-3} | x3-3x2y+3xy2-y3           |
+ 
         """
         if len(gens) == 1 and isinstance(gens[0], (list, tuple)):
             gens = gens[0]
@@ -258,7 +255,7 @@ class Macaulay2(Expect):
         EXAMPLES:
         This is a ring in variables named a through d over the finite field
         of order 7, with graded reverse lex ordering:
-            sage: R1 = macaulay2.ring('ZZ/7', '[a..d]', 'GRevLex'); print R1  # optional
+            sage: R1 = macaulay2.ring('ZZ/7', '[a..d]', 'GRevLex');  R1  # optional
             ZZ
             -- [a, b, c, d, MonomialOrder => GRevLex, MonomialSize => 16]
              7
@@ -270,45 +267,160 @@ class Macaulay2(Expect):
             QQ [x, y, MonomialOrder => Lex, MonomialSize => 16]
         """
         varstr = str(vars)[1:-1]
+        varstr = ", ".join(["symbol " + v for v in varstr.split(", ")])
         return self.new('%s[%s, MonomialSize=>16, MonomialOrder=>%s]'%(
             base_ring, varstr, order))
 
+    def _commands(self):
+        """
+        Return list of all commands defined in Macaulay2.  This is done by looking at all
+        of the keys of the dictionaries in dictionaryPath.
+        
+        EXAMPLES:
+            sage: cmds = macaulay2._commands()
+            sage: 'ring' in cmds
+            True
+            sage: len(cmds) > 50
+            True
+        """
+        dicts = self("dictionaryPath")
+        cmds = []
+        for d in dicts:
+            #Ignore the OutputDctionary since it contains
+            #lots of variables that we don't want to tab complete
+            if str(d) in ['OutputDictionary']:
+                continue
+
+            for cmd in d.keys():
+                cmd = str(cmd)
+                
+                #Ignore anything before the $
+                if "$" in cmd:
+                    cmd = cmd[cmd.find("$"):]
+
+                #Ignore not alphanumeric cmds
+                if not cmd.isalnum():
+                    continue
+
+                cmds.append(cmd)
+        cmds.sort()
+        return cmds
+        
+
+    def trait_names(self, verbose=True, use_disk_cache=True):
+        """
+        EXAMPLES:
+            sage: names = macaulay2.trait_names(verbose=False)
+            sage: 'ring' in names
+            True
+            sage: macaulay2.eval("abcabc = 4")
+            4
+            sage: names = macaulay2.trait_names(verbose=False)
+            sage: "abcabc" in names
+            True
+        """
+        try:
+            #Get the current variables
+            current = [str(s) for s in self('User#"private dictionary"').keys()]
+            trait_names = [s for s in current if (s.isalnum() and s[:4] != "sage")] + self.__commands
+            return trait_names
+        except AttributeError:
+            import sage.misc.persist
+            if use_disk_cache:
+                try:
+                    self.__commands = sage.misc.persist.load(COMMANDS_CACHE)
+                    return self.trait_names()
+                except IOError:
+                    pass
+            if verbose:
+                print "\nBuilding Macaulay2 command completion list (this takes"
+                print "a few seconds only the first time you do it)."
+                print "To force rebuild later, delete %s."%COMMANDS_CACHE
+            v = self._commands()
+            self.__commands = v
+            if len(v) > 200:
+                # M2 is actually installed.
+                sage.misc.persist.save(v, COMMANDS_CACHE)
+            return self.trait_names()
 
 class Macaulay2Element(ExpectElement):
 
     def _latex_(self):
-        return self.tex().str().strip('"').strip('$').replace('\\\\','\\')
+        """
+        EXAMPLES:
+            sage: m = macaulay2('matrix {{1,2},{3,4}}')
+            sage: m
+            | 1 2 |
+            | 3 4 |
+            sage: latex(m)
+            \bgroup\begin{pmatrix}1& {2}\\ {3}& {4}\\ \end{pmatrix}\egroup
+        """
+        return self.tex().external_string().strip('"').strip('$').replace('\\\\','\\')
 
     def __iter__(self):
+        """
+        EXAMPLES:
+            sage: l = macaulay2([1,2,3])
+            sage: list(iter(l))
+            [1, 2, 3]
+        """
         for i in range(len(self)):  # zero-indexed!
             yield self[i]
 
     def __str__(self):
+        """
+        EXAMPLES:
+            sage: m2 = macaulay2
+            sage: R = m2("QQ[x,y,z]/(x^3-y^3-z^3)")
+            sage: x = m2('x')
+            sage: y = m2('y')
+            sage: print x+y
+            x + y
+            sage: print m2("QQ[x,y,z]")
+            QQ [x, y, z]
+            sage: print m2("QQ[x,y,z]/(x+y+z)")
+            QQ [x, y, z]
+            ------------
+             x + y + z
+        """
         P = self._check_valid()
         return P.get(self.name())
 
-    def __repr__(self):
-        return self.str()
-    
-    def str(self):
+    repr = __str__
+
+    def external_string(self):
         P = self._check_valid()
-        X = P.eval('toExternalString(%s)'%self.name(), strip=True)
+        code = 'toExternalString(%s)'%self.name()
+        X = P.eval(code, strip=True)
         
         if 'stdio:' in X:
-            if 'cannot be converted to external string' in ans:
-                return clean_output(P.eval(self, '%s'%code))
-            raise RuntimeError, "Error evaluating Macaulay2 code.\nIN:%s\nOUT:%s"%(code, ans)
+            if 'to external string' in X:
+                return P.eval('%s'%self.name())
+            raise RuntimeError, "Error evaluating Macaulay2 code.\nIN:%s\nOUT:%s"%(code, X)
 
         s = multiple_replace({'\r':'', '\n':' '}, X)
         return s
-
+    
     def __len__(self):
+        """
+        EXAMPLES:
+            sage: l = macaulay2([1,2,3])
+            sage: len(l)
+            3
+            sage: type(_)
+            <type 'int'>
+        """
         self._check_valid()
         return int(self.parent()("#%s"%self.name()))
 
     def __getitem__(self, n):
+        """
+        EXAMPLES:
+            sage: l = macaulay2([1,2,3])
+            sage: l[0]
+            1
+        """
         self._check_valid()
-        #return self.parent().new('%s#%s'%(self.name(), n))
         return self.parent().new('%s_%s'%(self.name(), n))
 
     def __call__(self, x):
@@ -316,10 +428,6 @@ class Macaulay2Element(ExpectElement):
         P = self.parent()
         r = P(x)
         return P('%s %s'%(self.name(), r.name()))
-
-    def gen(self, n):
-        self._check_valid()
-        return self.parent().new('%s_%s'%(self._name, int(n)))
 
     def __floordiv__(self, x):
         """
@@ -330,10 +438,12 @@ class Macaulay2Element(ExpectElement):
 
         Now make the M2 version of R, so we can coerce elements of R to M2:
             sage: macaulay2(R)                              # optional
-            ZZ/7 [x, y, MonomialOrder => GRevLex, MonomialSize => 16]
-            sage: f = (x^3 + 2*y^2*x)^7; print f
+            ZZ
+            -- [x, y, MonomialOrder => GRevLex, MonomialSize => 16]
+             7
+            sage: f = (x^3 + 2*y^2*x)^7; f
             x^21 + 2*x^7*y^14
-            sage: h = macaulay2(f); print h            # optional
+            sage: h = macaulay2(f); h                  # optional
              21     7 14
             x   + 2x y
             sage: f1 = (x^2 + 2*y*x)                   # optional
@@ -341,7 +451,7 @@ class Macaulay2Element(ExpectElement):
             sage: f2 = (x^3 + 2*y*x)                   # optional
             sage: h2 = macaulay2(f2)                   # optional
             sage: u = h // [h1,h2]                     # optional
-            sage: u[0].str(), u[1].str()               # optional
+            sage: u[0].external_string(), u[1].external_string()               # optional
             ('x^19-2*x^18*y-3*x^17*y^2-x^16*y^3+2*x^15*y^4+3*x^14*y^5+x^13*y^6-2*x^12*y^7-3*x^11*y^8-x^10*y^9+2*x^9*y^10+3*x^8*y^11+x^7*y^12-2*x^6*y^13-x^5*y^14+2*x^4*y^15+3*x^3*y^16+x^2*y^17-x*y^17+2*y^18-3*x*y^16-y^17-2*x*y^15-3*y^16+x*y^14-2*y^15+3*x*y^13+y^14+2*x*y^12+3*y^13-x*y^11+2*y^12-3*x*y^10-y^11-2*x*y^9-3*y^10+x*y^8-2*y^9+3*x*y^7+y^8+2*x*y^6+3*y^7-x*y^5+2*y^6-3*x*y^4-y^5-2*x*y^3-3*y^4+x*y^2-2*y^3+3*x*y+y^2+2*x+3*y', '-2*y^18+y^17+3*y^16+2*y^15-y^14-3*y^13-2*y^12+y^11+3*y^10+2*y^9-y^8-3*y^7-2*y^6+y^5+3*y^4+2*y^3-y^2-3*y-2')
             sage: h == u[0]*h1 + u[1]*h2 + (h % [h1,h2]) # optional
             True
@@ -362,7 +472,9 @@ class Macaulay2Element(ExpectElement):
 
         Now make the M2 version of R, so we can coerce elements of R to M2:
             sage: macaulay2(R)                              # optional
-            ZZ/7 [x, y, MonomialOrder => GRevLex, MonomialSize => 16]
+            ZZ
+            -- [x, y, MonomialOrder => GRevLex, MonomialSize => 16]
+             7
             sage: f = (x^3 + 2*y^2*x)^7; f                  # optional
             x^21 + 2*x^7*y^14
             sage: h = macaulay2(f); print h                 # optional
@@ -373,7 +485,7 @@ class Macaulay2Element(ExpectElement):
             sage: f2 = (x^3 + 2*y*x)                        # optional
             sage: h2 = macaulay2(f2)                        # optional
             sage: h % [h1,h2]                               # optional
-            -3*x*y
+            -3x*y
             sage: u = h // [h1,h2]                          # optional
             sage: h == u[0]*h1 + u[1]*h2 + (h % [h1,h2])    # optional
             True
@@ -386,6 +498,14 @@ class Macaulay2Element(ExpectElement):
         return self.parent().new('%s %% %s'%(self.name(), x.name()))
 
     def __nonzero__(self):
+        """
+        EXAMPLES:
+            sage: a = macaulay2(0)
+            sage: a == 0
+            True
+            sage: a.__nonzero__()
+            False
+        """
         P = self.parent()
         return P.eval('%s == 0'%self.name()) == 'false'        
 
@@ -406,7 +526,7 @@ class Macaulay2Element(ExpectElement):
             sage: f.sage_polystring()                            # optional
             'x**3+3*y**11+5'
 	"""
-        return self.str().replace('^','**')
+        return self.external_string().replace('^','**')
 
     def structure_sheaf(self):
         """
@@ -416,11 +536,19 @@ class Macaulay2Element(ExpectElement):
             sage: X = R.Proj()                                  # optional
             sage: print X.structure_sheaf()                     # optional
             OO
-              sage5
+              sage...
         """
         return self.parent()('OO_%s'%self.name())
 
 def is_Macaulay2Element(x):
+    """
+    EXAMPLES:
+        sage: from sage.interfaces.macaulay2 import is_Macaulay2Element
+        sage: is_Macaulay2Element(2)
+        False
+        sage: is_Macaulay2Element(macaulay2(2))
+        True
+    """
     return isinstance(x, Macaulay2Element)        
 
 # An instance
diff -r 0b3ffa51fd38 -r 45523152acb3 sage/rings/polynomial/multi_polynomial_ideal.py
--- a/sage/rings/polynomial/multi_polynomial_ideal.py	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/rings/polynomial/multi_polynomial_ideal.py	Sun Jun 29 14:25:30 2008 -0600
@@ -1641,7 +1641,7 @@ class MPolynomialIdeal_macaulay2_repr:
             return self.__groebner_basis
         except AttributeError:
             I = self._macaulay2_()
-            G = str(I.gb().generators().str()).replace('\n','')
+            G = str(I.gb().generators().external_string()).replace('\n','')
             i = G.rfind('{{')
             j = G.rfind('}}')
             G = G[i+2:j].split(',')
@@ -2030,4 +2030,4 @@ class MPolynomialIdeal( MPolynomialIdeal
             return self._libsingular_normal_basis()
         else:
             gb = self.groebner_basis()
-            return list(singular.kbase(self.ring().ideal(gb)))
\ No newline at end of file
+            return list(singular.kbase(self.ring().ideal(gb)))
diff -r 0b3ffa51fd38 -r 45523152acb3 sage/rings/polynomial/multi_polynomial_libsingular.pyx
--- a/sage/rings/polynomial/multi_polynomial_libsingular.pyx	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/rings/polynomial/multi_polynomial_libsingular.pyx	Sun Jun 29 14:25:30 2008 -0600
@@ -646,7 +646,7 @@ cdef class MPolynomialRing_libsingular(M
             return element._polynomial_(self)
 
         if is_Macaulay2Element(element):
-            return self(repr(element))
+            return self(element.external_string())
 
         try:
             return self(str(element))
