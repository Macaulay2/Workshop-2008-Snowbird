# HG changeset patch
# User Mike Hansen <mhansen@gmail.com>
# Date 1214948712 21600
# Node ID 94f0f97ce380e5e0547b1741149c084bf96cd61f
# Parent  0b3ffa51fd3883c183c7c7c8b605a0f3f75c125c
[mq]: m2.patch

diff -r 0b3ffa51fd38 -r 94f0f97ce380 sage/interfaces/expect.py
--- a/sage/interfaces/expect.py	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/interfaces/expect.py	Tue Jul 01 15:45:12 2008 -0600
@@ -926,8 +926,8 @@ If this all works, you can then make cal
     def execute(self, *args, **kwds):
         return self.eval(*args, **kwds)
 
-    #def __call__(self, x, globals=None):
-    def __call__(self, x):
+    def __call__(self, x, name=None):
+
         r"""
         Create a new object in self from x.
 
@@ -937,15 +937,12 @@ If this all works, you can then make cal
                       X.foo(y,z,...)
         calls foo(X, y, z, ...) and returns the corresponding object.
         """
-        #if not globals is None:
-        #    for k, x in globals.iteritems():
-        #        self.set(k,x)
         cls = self._object_class()
 
         if isinstance(x, cls) and x.parent() is self:
             return x
         if isinstance(x, basestring):
-            return cls(self, x)
+            return cls(self, x, name=name)
         try:
             return self._coerce_from_special_method(x)
         except TypeError:
@@ -956,7 +953,7 @@ If this all works, you can then make cal
             return self._coerce_impl(x, use_special=False)
         except TypeError, msg:
             try:
-                return cls(self, str(x))
+                return cls(self, str(x), name=name)
             except TypeError, msg2:
                 raise TypeError, msg
 
@@ -1086,14 +1083,10 @@ If this all works, you can then make cal
         self.__seq += 1
         return "sage%s"%self.__seq
 
-    def _create(self, value):
-        name = self._next_var_name()
-        #self._last_name = name
+    def _create(self, value, name=None):
+        name = self._next_var_name() if name is None else name
         self.set(name, value)
         return name
-
-    #def _last_created_varname(self):
-    #    return self._last_name
 
     def _object_class(self):
         return ExpectElement
@@ -1196,7 +1189,7 @@ class ExpectElement(RingElement):
     """
     Expect element.
     """
-    def __init__(self, parent, value, is_name=False):
+    def __init__(self, parent, value, is_name=False, name=None):
         RingElement.__init__(self, parent)
         self._create = value
         if parent is None: return     # means "invalid element"
@@ -1211,7 +1204,7 @@ class ExpectElement(RingElement):
             self._name = value
         else:
             try:
-                self._name = parent._create(value)
+                self._name = parent._create(value, name=name)
             except (TypeError, KeyboardInterrupt, RuntimeError, ValueError), x:
                 self._session_number = -1
                 raise TypeError, x
diff -r 0b3ffa51fd38 -r 94f0f97ce380 sage/interfaces/macaulay2.py
--- a/sage/interfaces/macaulay2.py	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/interfaces/macaulay2.py	Tue Jul 01 15:45:12 2008 -0600
@@ -95,15 +95,16 @@ TODO:
 
 import os
 
-from expect import Expect, ExpectElement, AsciiArtString
+from expect import Expect, ExpectElement, AsciiArtString, ExpectFunction
 
-from sage.misc.misc import verbose
+from sage.misc.misc import DOT_SAGE, verbose
 from sage.misc.multireplace import multiple_replace
+import random
 
-from re import search
+import re
 
 def remove_output_labels(s):
-    m = search('o[0-9]+ = ', s)
+    m = re.search('o[0-9]+ = ', s)
     if m is None: return s
     i = m.start()
     j = m.end()
@@ -114,12 +115,8 @@ def remove_output_labels(s):
     s = '\n'.join([x[n:] for x in v])
     return s
 
-## def clean_output(s):
-##     i = s.find('= ')
-##     if i == -1:
-##         return s
-##     j = s[:i].rfind('\n')
-##     return (s[:j] + ' '*(i+1) + s[i+2:-1]).strip()
+
+COMMANDS_CACHE = '%s/macaulay2_commandlist_cache.sobj'%DOT_SAGE
 
 class Macaulay2(Expect):
     """
@@ -147,6 +144,11 @@ class Macaulay2(Expect):
     def _read_in_file_command(self, filename):
         return 'value get "%s"'%filename
 
+    def __getattr__(self, attrname):
+        if attrname[:1] == "_":
+            raise AttributeError
+        return Macaulay2Function(self, attrname)
+
     def eval(self, code, strip=True):
         """
         Send the code x to the Macaulay2 interpreter and return the output
@@ -155,6 +157,10 @@ class Macaulay2(Expect):
         INPUT:
             code -- str
             strip -- ignored
+
+        EXAMPLES:
+            sage: macaulay2.eval("2+2")
+            4
         """
         code = code.strip()
         # TODO: in some cases change toExternalString to toString??
@@ -162,17 +168,26 @@ class Macaulay2(Expect):
         if strip:
             ans = remove_output_labels(ans)
         return AsciiArtString(ans)
-            
 
     def get(self, var):
         """
         Get the value of the variable var.
+
+        EXAMPLES:
+            sage: macaulay2.set("a", "2")
+            sage: macaulay2.get("a")
+            2
         """
         return self.eval("describe %s"%var, strip=True)
 
     def set(self, var, value):
         """
         Set the variable var to the given value.
+
+        EXAMPLES:
+            sage: macaulay2.set("a", "2")
+            sage: macaulay2.get("a")
+            2
         """
         cmd = '%s=%s;'%(var,value)        
         ans = Expect.eval(self, cmd)
@@ -208,7 +223,17 @@ class Macaulay2(Expect):
             return _t
 
     def version(self):
-        return self("version")
+        """
+        Returns the version of Macaulay2.
+        
+        EXAMPLES:
+            sage: macaulay2.version() #optional
+            (1, 1)
+        """
+        s = self.eval("version")
+        r = re.compile("VERSION => (.*?)\n")
+        s = r.search(s).groups()[0]
+        return tuple(int(i) for i in s.split("."))
 
 ### Constructors
 
@@ -225,13 +250,15 @@ class Macaulay2(Expect):
         EXAMPLES:
             sage: R2 = macaulay2.ring('QQ', '[x, y]'); R2            # optional
             QQ [x, y, MonomialOrder => Lex, MonomialSize => 16]
-            sage: I = macaulay2.ideal( ('y^2 - x^3', 'x - y') ); print I   # optional
+            sage: I = macaulay2.ideal( ('y^2 - x^3', 'x - y') ); I   # optional
                       3    2
             ideal (- x  + y , x - y)
-            sage: J = I^3; print J.gb()                                    # optional
-            GroebnerBasis[status: done; S-pairs encountered up to degree 9]            
-            sage: print J.gb().generators()                                # optional
-            | y9-3y8+3y7-y6 xy6-2xy5+xy4-y7+2y6-y5 x2y3-x2y2-2xy4+2xy3+y5-y4 x3-3x2y+3xy2-y3 |
+            sage: J = I^3; J.gb().gens().transpose()                 # optional
+            {-9} | y9-3y8+3y7-y6             |
+            {-7} | xy6-2xy5+xy4-y7+2y6-y5    |
+            {-5} | x2y3-x2y2-2xy4+2xy3+y5-y4 |
+            {-3} | x3-3x2y+3xy2-y3           |
+ 
         """
         if len(gens) == 1 and isinstance(gens[0], (list, tuple)):
             gens = gens[0]
@@ -258,7 +285,7 @@ class Macaulay2(Expect):
         EXAMPLES:
         This is a ring in variables named a through d over the finite field
         of order 7, with graded reverse lex ordering:
-            sage: R1 = macaulay2.ring('ZZ/7', '[a..d]', 'GRevLex'); print R1  # optional
+            sage: R1 = macaulay2.ring('ZZ/7', '[a..d]', 'GRevLex');  R1  # optional
             ZZ
             -- [a, b, c, d, MonomialOrder => GRevLex, MonomialSize => 16]
              7
@@ -270,56 +297,183 @@ class Macaulay2(Expect):
             QQ [x, y, MonomialOrder => Lex, MonomialSize => 16]
         """
         varstr = str(vars)[1:-1]
-        return self.new('%s[%s, MonomialSize=>16, MonomialOrder=>%s]'%(
-            base_ring, varstr, order))
+        if ".." in varstr:
+            varstr = "symbol " + varstr[0] + ".." + "symbol " + varstr[-1]
+        else:
+            varstr = ", ".join(["symbol " + v for v in varstr.split(", ")])
+        return self.new('%s[%s, MonomialSize=>16, MonomialOrder=>%s]'%(base_ring, varstr, order))
+
+    def _commands(self):
+        """
+        Return list of all commands defined in Macaulay2.  This is done by looking at all
+        of the keys of the dictionaries in dictionaryPath.
+        
+        EXAMPLES:
+            sage: cmds = macaulay2._commands()
+            sage: 'ring' in cmds
+            True
+            sage: len(cmds) > 50
+            True
+        """
+        dicts = self("dictionaryPath")
+        cmds = []
+        for d in dicts:
+            #Ignore the OutputDctionary since it contains
+            #lots of variables that we don't want to tab complete
+            if str(d) in ['OutputDictionary']:
+                continue
+
+            for cmd in d.keys():
+                cmd = str(cmd)
+                
+                #Ignore anything before the $
+                if "$" in cmd:
+                    cmd = cmd[cmd.find("$"):]
+
+                #Ignore not alphanumeric cmds
+                if not cmd.isalnum():
+                    continue
+
+                cmds.append(cmd)
+        cmds.sort()
+        return cmds
+        
+
+    #def help(self, s):
+    #    """
+    #    EXAMPLES:
+    #        sage: macaulay2.help("gb")
+    #
+    #    """
+    #    return self.eval("help(%s)"%s)
+        
+
+    def trait_names(self, verbose=True, use_disk_cache=True):
+        """
+        EXAMPLES:
+            sage: names = macaulay2.trait_names(verbose=False)
+            sage: 'ring' in names
+            True
+            sage: macaulay2.eval("abcabc = 4")
+            4
+            sage: names = macaulay2.trait_names(verbose=False)
+            sage: "abcabc" in names
+            True
+        """
+        try:
+            #Get the current variables
+            current = [str(s) for s in self('User#"private dictionary"').keys()]
+            trait_names = [s for s in current if (s.isalnum() and s[:4] != "sage")] + self.__commands
+            return trait_names
+        except AttributeError:
+            import sage.misc.persist
+            if use_disk_cache:
+                try:
+                    self.__commands = sage.misc.persist.load(COMMANDS_CACHE)
+                    return self.trait_names()
+                except IOError:
+                    pass
+            if verbose:
+                print "\nBuilding Macaulay2 command completion list (this takes"
+                print "a few seconds only the first time you do it)."
+                print "To force rebuild later, delete %s."%COMMANDS_CACHE
+            v = self._commands()
+            self.__commands = v
+            if len(v) > 200:
+                # M2 is actually installed.
+                sage.misc.persist.save(v, COMMANDS_CACHE)
+            return self.trait_names()
+
+    def use(self, r):
+        r = self(r)
+        self.eval("use %s"%r.name())
 
 
 class Macaulay2Element(ExpectElement):
 
     def _latex_(self):
-        return self.tex().str().strip('"').strip('$').replace('\\\\','\\')
+        """
+        EXAMPLES:
+            sage: m = macaulay2('matrix {{1,2},{3,4}}')
+            sage: m
+            | 1 2 |
+            | 3 4 |
+            sage: latex(m)
+            \bgroup\begin{pmatrix}1& {2}\\ {3}& {4}\\ \end{pmatrix}\egroup
+        """
+        return self.tex().external_string().strip('"').strip('$').replace('\\\\','\\')
 
     def __iter__(self):
+        """
+        EXAMPLES:
+            sage: l = macaulay2([1,2,3])
+            sage: list(iter(l))
+            [1, 2, 3]
+        """
         for i in range(len(self)):  # zero-indexed!
             yield self[i]
 
     def __str__(self):
+        """
+        EXAMPLES:
+            sage: m2 = macaulay2
+            sage: R = m2("QQ[x,y,z]/(x^3-y^3-z^3)")
+            sage: x = m2('x')
+            sage: y = m2('y')
+            sage: print x+y
+            x + y
+            sage: print m2("QQ[x,y,z]")
+            QQ [x, y, z]
+            sage: print m2("QQ[x,y,z]/(x+y+z)")
+            QQ [x, y, z]
+            ------------
+             x + y + z
+        """
         P = self._check_valid()
-        return P.get(self.name())
+        return P.get(self._name)
 
-    def __repr__(self):
-        return self.str()
-    
-    def str(self):
+    repr = __str__
+
+    def external_string(self):
         P = self._check_valid()
-        X = P.eval('toExternalString(%s)'%self.name(), strip=True)
+        code = 'toExternalString(%s)'%self.name()
+        X = P.eval(code, strip=True)
         
         if 'stdio:' in X:
-            if 'cannot be converted to external string' in ans:
-                return clean_output(P.eval(self, '%s'%code))
-            raise RuntimeError, "Error evaluating Macaulay2 code.\nIN:%s\nOUT:%s"%(code, ans)
+            if 'to external string' in X:
+                return P.eval('%s'%self.name())
+            raise RuntimeError, "Error evaluating Macaulay2 code.\nIN:%s\nOUT:%s"%(code, X)
 
         s = multiple_replace({'\r':'', '\n':' '}, X)
         return s
-
+    
     def __len__(self):
+        """
+        EXAMPLES:
+            sage: l = macaulay2([1,2,3])
+            sage: len(l)
+            3
+            sage: type(_)
+            <type 'int'>
+        """
         self._check_valid()
         return int(self.parent()("#%s"%self.name()))
 
     def __getitem__(self, n):
+        """
+        EXAMPLES:
+            sage: l = macaulay2([1,2,3])
+            sage: l[0]
+            1
+        """
         self._check_valid()
-        #return self.parent().new('%s#%s'%(self.name(), n))
-        return self.parent().new('%s_%s'%(self.name(), n))
+        return self.parent().new('%s_(%s)'%(self.name(), n))
 
     def __call__(self, x):
         self._check_valid()
         P = self.parent()
         r = P(x)
         return P('%s %s'%(self.name(), r.name()))
-
-    def gen(self, n):
-        self._check_valid()
-        return self.parent().new('%s_%s'%(self._name, int(n)))
 
     def __floordiv__(self, x):
         """
@@ -330,10 +484,12 @@ class Macaulay2Element(ExpectElement):
 
         Now make the M2 version of R, so we can coerce elements of R to M2:
             sage: macaulay2(R)                              # optional
-            ZZ/7 [x, y, MonomialOrder => GRevLex, MonomialSize => 16]
-            sage: f = (x^3 + 2*y^2*x)^7; print f
+            ZZ
+            -- [x, y, MonomialOrder => GRevLex, MonomialSize => 16]
+             7
+            sage: f = (x^3 + 2*y^2*x)^7; f
             x^21 + 2*x^7*y^14
-            sage: h = macaulay2(f); print h            # optional
+            sage: h = macaulay2(f); h                  # optional
              21     7 14
             x   + 2x y
             sage: f1 = (x^2 + 2*y*x)                   # optional
@@ -341,7 +497,7 @@ class Macaulay2Element(ExpectElement):
             sage: f2 = (x^3 + 2*y*x)                   # optional
             sage: h2 = macaulay2(f2)                   # optional
             sage: u = h // [h1,h2]                     # optional
-            sage: u[0].str(), u[1].str()               # optional
+            sage: u[0].external_string(), u[1].external_string()               # optional
             ('x^19-2*x^18*y-3*x^17*y^2-x^16*y^3+2*x^15*y^4+3*x^14*y^5+x^13*y^6-2*x^12*y^7-3*x^11*y^8-x^10*y^9+2*x^9*y^10+3*x^8*y^11+x^7*y^12-2*x^6*y^13-x^5*y^14+2*x^4*y^15+3*x^3*y^16+x^2*y^17-x*y^17+2*y^18-3*x*y^16-y^17-2*x*y^15-3*y^16+x*y^14-2*y^15+3*x*y^13+y^14+2*x*y^12+3*y^13-x*y^11+2*y^12-3*x*y^10-y^11-2*x*y^9-3*y^10+x*y^8-2*y^9+3*x*y^7+y^8+2*x*y^6+3*y^7-x*y^5+2*y^6-3*x*y^4-y^5-2*x*y^3-3*y^4+x*y^2-2*y^3+3*x*y+y^2+2*x+3*y', '-2*y^18+y^17+3*y^16+2*y^15-y^14-3*y^13-2*y^12+y^11+3*y^10+2*y^9-y^8-3*y^7-2*y^6+y^5+3*y^4+2*y^3-y^2-3*y-2')
             sage: h == u[0]*h1 + u[1]*h2 + (h % [h1,h2]) # optional
             True
@@ -362,7 +518,9 @@ class Macaulay2Element(ExpectElement):
 
         Now make the M2 version of R, so we can coerce elements of R to M2:
             sage: macaulay2(R)                              # optional
-            ZZ/7 [x, y, MonomialOrder => GRevLex, MonomialSize => 16]
+            ZZ
+            -- [x, y, MonomialOrder => GRevLex, MonomialSize => 16]
+             7
             sage: f = (x^3 + 2*y^2*x)^7; f                  # optional
             x^21 + 2*x^7*y^14
             sage: h = macaulay2(f); print h                 # optional
@@ -373,7 +531,7 @@ class Macaulay2Element(ExpectElement):
             sage: f2 = (x^3 + 2*y*x)                        # optional
             sage: h2 = macaulay2(f2)                        # optional
             sage: h % [h1,h2]                               # optional
-            -3*x*y
+            -3x*y
             sage: u = h // [h1,h2]                          # optional
             sage: h == u[0]*h1 + u[1]*h2 + (h % [h1,h2])    # optional
             True
@@ -386,6 +544,14 @@ class Macaulay2Element(ExpectElement):
         return self.parent().new('%s %% %s'%(self.name(), x.name()))
 
     def __nonzero__(self):
+        """
+        EXAMPLES:
+            sage: a = macaulay2(0)
+            sage: a == 0
+            True
+            sage: a.__nonzero__()
+            False
+        """
         P = self.parent()
         return P.eval('%s == 0'%self.name()) == 'false'        
 
@@ -406,7 +572,7 @@ class Macaulay2Element(ExpectElement):
             sage: f.sage_polystring()                            # optional
             'x**3+3*y**11+5'
 	"""
-        return self.str().replace('^','**')
+        return self.external_string().replace('^','**')
 
     def structure_sheaf(self):
         """
@@ -416,11 +582,247 @@ class Macaulay2Element(ExpectElement):
             sage: X = R.Proj()                                  # optional
             sage: print X.structure_sheaf()                     # optional
             OO
-              sage5
+              sage...
         """
         return self.parent()('OO_%s'%self.name())
 
+    def substitute(self, *args, **kwds):
+        """
+        Note that we have to override the substitute method so that we get
+        the default one from Macaulay2 instead of the one provided by Element.
+        """
+        return self.__getattr__("substitute")(*args, **kwds)
+
+    subs = substitute
+
+    def trait_names(self):
+        return self.parent().trait_names()
+
+    def cls(self):
+        """
+        Since class is a keyword in Python, we have to use cls to call
+        Macaulay2's class.
+
+
+        """
+        return self.parent()("class %s"%self.name())
+
+    ##########################
+    #Aliases for M2 operators#
+    ##########################
+    def _operator(self, opstr, x):
+        parent = self.parent()
+        x = parent(x)
+        return parent("%s%s%s"%(self.name(), opstr, x.name()))
+
+    def sharp(self, x):
+        """
+        EXAMPLES:
+            sage: a = macaulay2([1,2,3])
+            sage: a.sharp(0)
+            1
+        """
+        return self._operator("#", x)
+
+    def starstar(self, x):
+        return self._operator("**", x)
+
+    def dot(self, x):
+        return self._operator(".", x)
+
+    def underscore(self, x):
+        """
+        EXAMPLES:
+            sage: a = macaulay2([1,2,3])
+            sage: a.underscore(0)
+            1
+        """
+        return self._operator("_", x)
+
+    ####################
+    #Conversion to Sage#
+    ####################
+    def to_sage(self):
+        """
+        EXAMPLES:
+            sage: macaulay2(ZZ).to_sage()
+            Integer Ring
+            sage: macaulay2(QQ).to_sage()
+            RationalField
+
+            sage: macaulay2(2).to_sage()
+            2
+            sage: macaulay2(1/2).to_sage()
+            1/2
+            sage: macaulay2(2/1).to_sage()
+            2
+            sage: _.parent()
+            Rational Field
+            sage: macaulay2([1,2,3]).to_sage()
+            [1, 2, 3]
+
+            sage: m = matrix([[1,2],[3,4]])
+            sage: macaulay2(m).to_sage()
+            [1 2]
+            [3 4]
+
+            sage: macaulay2(QQ['x,y']).to_sage()
+            Multivariate Polynomial Ring in x, y over Rational Field
+            sage: macaulay2(QQ['x']).to_sage()
+            Univariate Polynomial Ring in x over Rational Field
+            sage: macaulay2(GF(7)['x,y']).to_sage()
+            Multivariate Polynomial Ring in x, y over Finite Field of size 7
+
+            sage: macaulay2(GF(7)).to_sage()
+            Finite Field of size 7
+            sage: macaulay2(GF(49, 'a')).to_sage()
+            Finite Field in a of size 7^2
+
+            sage: R.<x,y> = QQ[]
+            sage: macaulay2(x^2+y^2+1).to_sage()
+            x^2 + y^2 + 1
+
+            sage: R = macaulay2("QQ[x,y]")
+            sage: I = macaulay2("ideal (x,y)")
+            sage: I.to_sage()
+            Ideal (x, y) of Multivariate Polynomial Ring in x, y over Rational Field
+            
+            sage: X = R/I
+            sage: X.to_sage()
+            Quotient of Multivariate Polynomial Ring in x, y over Rational Field by the ideal (x, y)
+
+        """
+        repr_str = str(self)
+        cls_str = str(self.cls())
+        cls_cls_str = str(self.cls().cls())
+
+        if repr_str == "ZZ":
+            from sage.rings.all import ZZ
+            return ZZ
+        elif repr_str == "QQ":
+            from sage.rings.all import QQ
+            return QQ
+
+        if cls_cls_str == "Type":
+            if cls_str == "List":
+                return [entry.to_sage() for entry in self]
+            elif cls_str == "Matrix":
+                from sage.matrix.all import matrix
+                base_ring = self.ring().to_sage()
+                entries = self.entries().to_sage()
+                return matrix(base_ring, entries)
+            elif cls_str == "Ideal":
+                parent = self.ring().to_sage()
+                gens = self.gens().entries().flatten().to_sage()
+                return parent.ideal(*gens)
+            elif cls_str == "QuotientRing":
+                ambient = self.ambient().to_sage()
+                ideal = self.ideal().to_sage()
+                return ambient.quotient(ideal)
+            elif cls_str == "PolynomialRing":
+                from sage.rings.all import PolynomialRing
+                from sage.rings.polynomial.term_order import inv_macaulay2_name_mapping
+
+                #Get the base ring
+                base_ring = self.coefficientRing().to_sage()
+            
+                #Get a string list of generators
+                gens = str(self.gens())[1:-1]
+
+                #Handle the term order
+                external_string = self.external_string()
+                order = None
+                if "Degrees" in external_string:
+                    raise ValueError, "cannot convert Macaulay2 polynomial ring with non-default degrees to Sage"
+                if "MonomialOrder" not in external_string:
+                    order = "degrevlex"
+                else:
+                    for order_name in inv_macaulay2_name_mapping:
+                        if order_name in external_string:
+                            order = inv_macaulay2_name_mapping[order_name]
+                if len(gens) > 1 and order is None:
+                    raise ValueError, "cannot convert Macaulay2's term order to a Sage term order"
+            
+                return PolynomialRing(base_ring, order=order, names=gens)
+            elif cls_str == "QuotientRing":
+                #Handle the ZZ/n case
+                if "ZZ" in repr_str and "--" in repr_str:
+                    from sage.rings.all import ZZ, GF
+                    external_string = self.external_string()
+                    zz, n = external_string.split("/")
+                
+                    #Note that n must be prime since it is
+                    #coming from Macaulay 2
+                    return GF(ZZ(n))
+            elif cls_str == "GaloisField":
+                from sage.rings.all import ZZ, GF
+                gf, n = repr_str.split(" ")
+                n = ZZ(n)
+                if n.is_prime():
+                    return GF(n)
+                else:
+                    gen = str(self.gens())[1:-1]
+                    return GF(n, gen)
+        else:
+            #Handle the integers and rationals separately
+            if cls_str == "ZZ":
+                from sage.rings.all import ZZ
+                return ZZ(repr_str)
+            elif cls_str == "QQ":
+                from sage.rings.all import QQ
+                if "/" not in repr_str:
+                    repr_str = repr_str + "/1"
+                return QQ(repr_str)
+
+            m2_parent = self.cls()
+            parent = m2_parent.to_sage()
+
+            if cls_cls_str == "PolynomialRing":
+                from sage.misc.sage_eval import sage_eval
+                gens_dict = parent.gens_dict()
+                return sage_eval(self.external_string(), gens_dict)
+
+        from sage.misc.sage_eval import sage_eval
+        try:
+            return sage_eval(repr_str)
+        except:
+            raise NotImplementedError, "cannot convert %s to a Sage object"%repr_str
+      
+
+class Macaulay2Function(ExpectFunction):
+    def _sage_doc_(self):
+        """
+        """
+        if self._parent._expect is None:
+            self._parent._start()
+        E = self._parent._expect
+        E.sendline("help(%s)"%self._name)
+        E.expect(self._parent._prompt)
+        s = E.before
+        self._parent.eval("2+2")
+        return s
+
+    def _sage_src_(self):
+        """
+        """
+        if self._parent._expect is None:
+            self._parent._start()
+        E = self._parent._expect
+        E.sendline("code(methods %s)"%self._name)
+        E.expect(self._parent._prompt)
+        s = E.before
+        self._parent.eval("2+2")
+        return s
+
 def is_Macaulay2Element(x):
+    """
+    EXAMPLES:
+        sage: from sage.interfaces.macaulay2 import is_Macaulay2Element
+        sage: is_Macaulay2Element(2)
+        False
+        sage: is_Macaulay2Element(macaulay2(2))
+        True
+    """
     return isinstance(x, Macaulay2Element)        
 
 # An instance
diff -r 0b3ffa51fd38 -r 94f0f97ce380 sage/matrix/matrix1.pyx
--- a/sage/matrix/matrix1.pyx	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/matrix/matrix1.pyx	Tue Jul 01 15:45:12 2008 -0600
@@ -211,6 +211,25 @@ cdef class Matrix(matrix0.Matrix):
             raise TypeError, "Cannot coerce to Singular"
 
         return singular.matrix(self.nrows(),self.ncols(),singular(self.list()))
+
+    def _macaulay2_(self, macaulay2=None):
+        """
+        EXAMPLES:
+            sage: m = matrix(ZZ, [[1,2],[3,4]])
+            sage: macaulay2(m)                  #optional
+            | 1 2 |
+            | 3 4 |
+
+            sage: R.<x,y> = QQ[]
+            sage: m = matrix([[x,y],[1+x,1+y]])
+            sage: macaulay2(m)                  #optional
+            | x   y   |
+            | x+1 y+1 |
+
+        """
+        base_ring = macaulay2(self.base_ring())
+        entries = map(list, self)
+        return macaulay2(entries).matrix()
 
     def numpy(self, dtype=None):
         """
diff -r 0b3ffa51fd38 -r 94f0f97ce380 sage/rings/integer_mod_ring.py
--- a/sage/rings/integer_mod_ring.py	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/rings/integer_mod_ring.py	Tue Jul 01 15:45:12 2008 -0600
@@ -216,6 +216,24 @@ class IntegerModRing_generic(quotient_ri
 
         self._zero_element = integer_mod.IntegerMod(self, 0)
         self._one_element = integer_mod.IntegerMod(self, 1)
+
+    def _macaulay2_init_(self):
+        """
+        EXAMPLES:
+            sage: macaulay2(Integers(7))  #optional
+            ZZ
+            --
+             7
+
+            sage: macaulay2(Integers(10)) #optional
+            Traceback (most recent call last):
+            ...
+            TypeError: Error evaluating Macaulay2 code.
+            IN:sage1=ZZ/10;
+            OUT:stdio:3:9:(1):[0]: ZZ/n not implemented yet for composite n
+
+        """
+        return "ZZ/%s"%self.order()
 
     def krull_dimension(self):
         """
diff -r 0b3ffa51fd38 -r 94f0f97ce380 sage/rings/integer_ring.pyx
--- a/sage/rings/integer_ring.pyx	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/rings/integer_ring.pyx	Tue Jul 01 15:45:12 2008 -0600
@@ -815,6 +815,14 @@ cdef class IntegerRing_class(PrincipalId
         """
         return 'IntegerRing()'
 
+    def _macaulay2_init_(self):
+        """
+        EXAMPLES:
+            sage: macaulay2(ZZ)       #optional
+            ZZ
+        """
+        return "ZZ"
+
 ZZ = IntegerRing_class()
 Z = ZZ
 
diff -r 0b3ffa51fd38 -r 94f0f97ce380 sage/rings/polynomial/multi_polynomial_ideal.py
--- a/sage/rings/polynomial/multi_polynomial_ideal.py	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/rings/polynomial/multi_polynomial_ideal.py	Tue Jul 01 15:45:12 2008 -0600
@@ -1641,7 +1641,7 @@ class MPolynomialIdeal_macaulay2_repr:
             return self.__groebner_basis
         except AttributeError:
             I = self._macaulay2_()
-            G = str(I.gb().generators().str()).replace('\n','')
+            G = str(I.gb().generators().external_string()).replace('\n','')
             i = G.rfind('{{')
             j = G.rfind('}}')
             G = G[i+2:j].split(',')
@@ -2030,4 +2030,4 @@ class MPolynomialIdeal( MPolynomialIdeal
             return self._libsingular_normal_basis()
         else:
             gb = self.groebner_basis()
-            return list(singular.kbase(self.ring().ideal(gb)))
\ No newline at end of file
+            return list(singular.kbase(self.ring().ideal(gb)))
diff -r 0b3ffa51fd38 -r 94f0f97ce380 sage/rings/polynomial/multi_polynomial_libsingular.pyx
--- a/sage/rings/polynomial/multi_polynomial_libsingular.pyx	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/rings/polynomial/multi_polynomial_libsingular.pyx	Tue Jul 01 15:45:12 2008 -0600
@@ -646,7 +646,7 @@ cdef class MPolynomialRing_libsingular(M
             return element._polynomial_(self)
 
         if is_Macaulay2Element(element):
-            return self(repr(element))
+            return self(element.external_string())
 
         try:
             return self(str(element))
@@ -3680,7 +3680,7 @@ cdef class MPolynomial_libsingular(sage.
 
         return co.new_MP(self._parent, p_Minus_mm_Mult_qq(p_Copy(self._poly, r), m._poly, q._poly, r))
 
-    def _macaulay2_init_(self, macaulay2=macaulay2):
+    def _macaulay2_(self, macaulay2=macaulay2):
         """
         Return a Macaulay2 string representation of this polynomial.
 
@@ -3694,23 +3694,21 @@ cdef class MPolynomial_libsingular(sage.
             sage: f = (x^3 + 2*y^2*x)^7; f
             x^21 + 2*x^7*y^14
 
-        Always call the Macaulay2 ring conversion on the parent polynomial
-        ring before converting a copy of elements to Macaulay2:
-            sage: macaulay2(R)                      # optional
-            ZZ/7 [x, y, MonomialOrder => GRevLex, MonomialSize => 16]
-            sage: h = f._macaulay2_(); h            # optional
-            x^21+2*x^7*y^14
-            sage: k = (x+y)._macaulay2_init_(); k
-            'x + y'
-            sage: k = macaulay2(k)                  # optional
+            sage: h = macaulay2(f); h               # optional
+             21     7 14
+            x   + 2x y
+            sage: k = macaulay2(x+y); k             # optional
+            x + y
             sage: k + h                             # optional
-            x^21+2*x^7*y^14+x+y
+             21     7 14
+            x   + 2x y   + x + y
             sage: R(h)                              # optional
             x^21 + 2*x^7*y^14
             sage: R(h^20) == f^20                   # optional
             True
         """
-        return repr(self)
+        m2_parent = macaulay2(self.parent())
+        return macaulay2(repr(self))
 
     def add_m_mul_q(self, MPolynomial_libsingular m, MPolynomial_libsingular q):
         r"""
diff -r 0b3ffa51fd38 -r 94f0f97ce380 sage/rings/polynomial/polynomial_ring.py
--- a/sage/rings/polynomial/polynomial_ring.py	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/rings/polynomial/polynomial_ring.py	Tue Jul 01 15:45:12 2008 -0600
@@ -376,6 +376,21 @@ class PolynomialRing_general(sage.algebr
     def _gap_init_(self):
         return 'PolynomialRing(%s, ["%s"])'%(self.base_ring()._gap_init_(), self.variable_name())
 
+    def _macaulay2_(self, m2=None):
+        """
+        EXAMPLES:
+            sage: R = QQ['x']
+            sage: macaulay2(R) #optional
+            QQ [x]
+        """
+        if m2 is None:
+            import sage.interfaces.macaulay2
+            m2 = sage.interfaces.macaulay2.macaulay2
+        base_ring = m2( self.base_ring() )
+        var = self.gen()
+        return m2("%s[symbol %s]"%(base_ring.name(), var))
+        
+    
     def _is_valid_homomorphism_(self, codomain, im_gens):
         try:
             # all that is needed is that elements of the base ring
diff -r 0b3ffa51fd38 -r 94f0f97ce380 sage/rings/polynomial/term_order.py
--- a/sage/rings/polynomial/term_order.py	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/rings/polynomial/term_order.py	Tue Jul 01 15:45:12 2008 -0600
@@ -227,6 +227,11 @@ macaulay2_name_mapping = {'lex'         
                           'revlex'       :'RevLex, Global=>false', 
                           'degrevlex'    :'GRevLex', 
                           'deglex'       :'GLex'}
+
+inv_macaulay2_name_mapping = { 'Lex':'lex', 
+                               'RevLex, Global=>false':'revlex', 
+                               'GRevLex':"degrevlex", 
+                               'GLex':'deglex'}
 
 magma_name_mapping =     {'lex'          :'"lex"', 
                           'degrevlex'    :'"grevlex"',
diff -r 0b3ffa51fd38 -r 94f0f97ce380 sage/rings/rational_field.py
--- a/sage/rings/rational_field.py	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/rings/rational_field.py	Tue Jul 01 15:45:12 2008 -0600
@@ -649,6 +649,14 @@ class RationalField(_uniq, number_field_
         """
         return 'RationalField()'
 
+    def _macaulay2_init_(self):
+        """
+        EXAMPLES:
+            sage: macaulay2(QQ)       #optional
+            QQ
+        """
+        return "QQ"
+
 
 QQ = RationalField()
 Q = QQ
diff -r 0b3ffa51fd38 -r 94f0f97ce380 sage/rings/ring.pyx
--- a/sage/rings/ring.pyx	Sun Jun 29 14:25:30 2008 -0600
+++ b/sage/rings/ring.pyx	Tue Jul 01 15:45:12 2008 -0600
@@ -1505,6 +1505,24 @@ cdef class FiniteField(Field):
         p = self.polynomial()
         return "ext< %s | %s >"%(B._magma_init_(),p._magma_init_())
     
+    def _macaulay2_init_(self):
+        """
+        Returns the string representation of self that Macaulay2 can
+        under stand.
+
+        EXAMPLES:
+            sage: GF(97,'a')._macaulay2_init_()
+            'GF 97'
+            
+            sage: macaulay2(GF(97, 'a')) #optional
+            ZZ
+            --
+            97
+            sage: macaulay2(GF(49, 'a')) #optional
+            GF 49
+        """
+        return "GF %s"%(self.order())
+
     cdef int _cmp_c_impl(left, Parent right) except -2:
         """
         Compares this finite field with other.
